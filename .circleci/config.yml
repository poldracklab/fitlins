version: 2
jobs:
  build:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tmp/src/fitlins
    steps:
      - run:
          name: Install parallel gzip and Python 3
          command: |
            apk add --no-cache pigz python3
      - checkout
      - setup_remote_docker
      - run:
          name: Fetch latest release image
          no_output_timeout: 10m
          command: |
            docker pull poldracklab/fitlins:latest
      - run:
          name: Build image
          no_output_timeout: 30m
          command: |
            THISVERSION=$( python3 -c 'import fitlins; print(fitlins.__version__)' )
            echo "Building version ${CIRCLE_TAG:-$THISVERSION}"
            docker build \
              --tag poldracklab/fitlins:latest \
              --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
              --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" .
      - run:
          name: Verify executable can be run
          command: docker run --rm -it poldracklab/fitlins:latest --help
      - run:
          name: Check version
          command: |
              docker run --rm -it poldracklab/fitlins:latest --version
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save poldracklab/fitlins:latest \
            | pigz -2 -p 3 > /tmp/cache/docker.tar.gz
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/docker.tar.gz
            - src/fitlins

  cache_test_data:
    docker:
      - image: continuumio/miniconda3:4.5.12
    working_directory: /tmp/data
    steps:
      - restore_cache:
          keys:
            - ds003-v0-{{ .Branch }}-
            - ds003-v0-master-
            - ds003-v0-
      - run:
          name: Install datalad and set git ID
          command: |
            conda install -c conda-forge datalad git-annex
            git config --global user.name 'FitLins CircleCI User'
            git config --global user.email 'crn.poldracklab@gmail.com'
      - run:
          name: Install fMRIPrep derivatives of ds000003
          command: |
            datalad install -r ///labs/poldrack/ds003_fmriprep
            datalad update ds003_fmriprep/
            datalad get ds003_fmriprep/sub-0{1,2,3}/func/*_space-MNI152NLin2009cAsym_desc-*.nii.gz
            datalad get ds003_fmriprep/sub-0{1,2,3}/func/*_desc-confounds_*.tsv
      - run:
          name: Download a model for ds000003
          command: |
              mkdir -p ds003_models
              curl -sSL https://raw.githubusercontent.com/effigies/BIDS-examples/enh/models/ds003/models/model-001_smdl.json \
                -o ds003_models/model-001_smdl.json
      - save_cache:
         key: ds003-v0-{{ .Branch }}-{{ .BuildNum }}
         paths:
            - /tmp/data

  build_docs:
    docker:
      - image: python:latest
    working_directory: /tmp/src/fitlins
    steps:
      - run:
          name: Check Python version and upgrade pip
          command: |
            python --version
            python -m pip install -U pip setuptools
      - checkout
      - run:
          name: Install FitLins
          command: |
            python -m pip install ".[docs]"
            make html
      - store_artifacts:
          path: /tmp/src/fitlins/docs/_build/html

  test_ds003:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/fitlins
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - ds003-v0-{{ .Branch }}-
            - ds003-v0-master-
            - ds003-v0-
      - run:
          name: Install coverage and codecov
          command: |
              pyenv install 3.6.3
              pyenv local 3.6.3
              python -m pip install -U coverage codecov
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run FitLins
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/ds003/work /tmp/ds003/derivatives
            chmod 777 /tmp/ds003/work /tmp/ds003/derivatives
            export CONDA_PREFIX=/opt/miniconda-latest/envs/neuro
            docker run --rm -it -v /tmp/data/ds003_fmriprep:/data:ro \
                -v /tmp/ds003/derivatives:/out \
                -v /tmp/ds003/work:/scratch \
                -v /tmp/data/ds003_models:/models \
                -e COVERAGE_FILE=/scratch/.coverage \
                --entrypoint="/neurodocker/startup.sh" \
                poldracklab/fitlins:latest \
                coverage run \
                --rcfile /src/fitlins/docker/multiproc.coveragerc \
                $CONDA_PREFIX/bin/fitlins /data/sourcedata /out dataset \
                -d /data -m /models/model-001_smdl.json -w /scratch \
                --participant-label 01 02 03 --space MNI152NLin2009cAsym \
                --n-cpus 2
      - run:
          name: Combine coverage and submit
          command: |
              pyenv local 3.6.3
              python -m coverage combine \
                --rcfile /tmp/src/fitlins/docker/multiproc.coveragerc \
                /tmp/ds003/work/.coverage.*
              sed -i -e 's/.opt.miniconda-latest.envs.neuro.lib.python3.6.site-packages/\/tmp\/src\/fitlins/g' .coverage
              python -m coverage xml
              python -m codecov --file coverage.xml --flags ds003 -e CIRCLE_JOB
      - store_artifacts:
          path: /tmp/ds003

  deploy_test:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/fitlins
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Check Docker credentials
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
            fi
      - run:
          name: Build and check Python packages
          command: |
            pip install "setuptools>=27.0" twine
            echo "${CIRCLE_TAG}" > fitlins/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
            twine check dist/*

  deploy_master:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/fitlins
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              zcat /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag poldracklab/fitlins poldracklab/fitlins:master
              docker push poldracklab/fitlins:master
            fi

  deploy:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/fitlins
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              zcat /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker push poldracklab/fitlins:latest
              docker tag poldracklab/fitlins poldracklab/fitlins:$CIRCLE_TAG
              docker push poldracklab/fitlins:$CIRCLE_TAG
            fi
      - run:
          name: Deploy to PyPi
          command: |
            pip install "setuptools>=27.0" twine
            echo "${CIRCLE_TAG}" > fitlins/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
            twine check dist/*
            twine upload dist/*

workflows:
  version: 2
  fitlins_tests:
    jobs:
      - build:
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/
      - cache_test_data:
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/
      - build_docs:
          filters:
            tags:
              only: /.*/
      - test_ds003:
          requires:
            - build
            - cache_test_data
          filters:
            tags:
              only: /.*/
      - deploy_master:
          requires:
            - test_ds003
          filters:
            branches:
              only: master
      - deploy_test:
          requires:
            - build
          filters:
            branches:
              only: /rel\/[\d\.]+/
            tags:
              ignore: /.*/
      - deploy:
          requires:
            - test_ds003
            - build_docs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
